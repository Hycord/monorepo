"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@radix-ui+react-slider@1.1.2_@types+react-dom@18.2.19_@types+react@18.2.55_react-dom@18.2.0_react@18.2.0";
exports.ids = ["vendor-chunks/@radix-ui+react-slider@1.1.2_@types+react-dom@18.2.19_@types+react@18.2.55_react-dom@18.2.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@radix-ui+react-slider@1.1.2_@types+react-dom@18.2.19_@types+react@18.2.55_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-slider/dist/index.mjs":
/*!********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@radix-ui+react-slider@1.1.2_@types+react-dom@18.2.19_@types+react@18.2.55_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-slider/dist/index.mjs ***!
  \********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Range: () => (/* binding */ $faa2e61a3361514f$export$9a58ef0d7ad3278c),\n/* harmony export */   Root: () => (/* binding */ $faa2e61a3361514f$export$be92b6f5f03c0fe9),\n/* harmony export */   Slider: () => (/* binding */ $faa2e61a3361514f$export$472062a354075cee),\n/* harmony export */   SliderRange: () => (/* binding */ $faa2e61a3361514f$export$a5cf38a7a000fe77),\n/* harmony export */   SliderThumb: () => (/* binding */ $faa2e61a3361514f$export$2c1b491743890dec),\n/* harmony export */   SliderTrack: () => (/* binding */ $faa2e61a3361514f$export$105594979f116971),\n/* harmony export */   Thumb: () => (/* binding */ $faa2e61a3361514f$export$6521433ed15a34db),\n/* harmony export */   Track: () => (/* binding */ $faa2e61a3361514f$export$13921ac0cc260818),\n/* harmony export */   createSliderScope: () => (/* binding */ $faa2e61a3361514f$export$ef72632d7b901f97)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/../../node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/.pnpm/next@14.1.0_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _radix_ui_number__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/number */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+number@1.0.1/node_modules/@radix-ui/number/dist/index.mjs\");\n/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/primitive */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+primitive@1.0.1/node_modules/@radix-ui/primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-compose-refs@1.0.1_@types+react@18.2.55_react@18.2.0/node_modules/@radix-ui/react-compose-refs/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-context */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-context@1.0.1_@types+react@18.2.55_react@18.2.0/node_modules/@radix-ui/react-context/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-use-controllable-state */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-use-controllable-state@1.0.1_@types+react@18.2.55_react@18.2.0/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_direction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @radix-ui/react-direction */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-direction@1.0.1_@types+react@18.2.55_react@18.2.0/node_modules/@radix-ui/react-direction/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_previous__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @radix-ui/react-use-previous */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-use-previous@1.0.1_@types+react@18.2.55_react@18.2.0/node_modules/@radix-ui/react-use-previous/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @radix-ui/react-use-size */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-use-size@1.0.1_@types+react@18.2.55_react@18.2.0/node_modules/@radix-ui/react-use-size/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @radix-ui/react-primitive */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-primitive@1.0.3_@types+react-dom@18.2.19_@types+react@18.2.55_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_collection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-collection */ \"(ssr)/../../node_modules/.pnpm/@radix-ui+react-collection@1.0.3_@types+react-dom@18.2.19_@types+react@18.2.55_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-collection/dist/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst $faa2e61a3361514f$var$PAGE_KEYS = [\n    \"PageUp\",\n    \"PageDown\"\n];\nconst $faa2e61a3361514f$var$ARROW_KEYS = [\n    \"ArrowUp\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\"\n];\nconst $faa2e61a3361514f$var$BACK_KEYS = {\n    \"from-left\": [\n        \"Home\",\n        \"PageDown\",\n        \"ArrowDown\",\n        \"ArrowLeft\"\n    ],\n    \"from-right\": [\n        \"Home\",\n        \"PageDown\",\n        \"ArrowDown\",\n        \"ArrowRight\"\n    ],\n    \"from-bottom\": [\n        \"Home\",\n        \"PageDown\",\n        \"ArrowDown\",\n        \"ArrowLeft\"\n    ],\n    \"from-top\": [\n        \"Home\",\n        \"PageDown\",\n        \"ArrowUp\",\n        \"ArrowLeft\"\n    ]\n};\n/* -------------------------------------------------------------------------------------------------\n * Slider\n * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$SLIDER_NAME = \"Slider\";\nconst [$faa2e61a3361514f$var$Collection, $faa2e61a3361514f$var$useCollection, $faa2e61a3361514f$var$createCollectionScope] = (0,_radix_ui_react_collection__WEBPACK_IMPORTED_MODULE_2__.createCollection)($faa2e61a3361514f$var$SLIDER_NAME);\nconst [$faa2e61a3361514f$var$createSliderContext, $faa2e61a3361514f$export$ef72632d7b901f97] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_3__.createContextScope)($faa2e61a3361514f$var$SLIDER_NAME, [\n    $faa2e61a3361514f$var$createCollectionScope\n]);\nconst [$faa2e61a3361514f$var$SliderProvider, $faa2e61a3361514f$var$useSliderContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME);\nconst $faa2e61a3361514f$export$472062a354075cee = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { name: name, min: min = 0, max: max = 100, step: step = 1, orientation: orientation = \"horizontal\", disabled: disabled = false, minStepsBetweenThumbs: minStepsBetweenThumbs = 0, defaultValue: defaultValue = [\n        min\n    ], value: value1, onValueChange: onValueChange = ()=>{}, onValueCommit: onValueCommit = ()=>{}, inverted: inverted = false, ...sliderProps } = props;\n    const [slider, setSlider] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, (node)=>setSlider(node));\n    const thumbRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Set());\n    const valueIndexToChangeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const isHorizontal = orientation === \"horizontal\"; // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = slider ? Boolean(slider.closest(\"form\")) : true;\n    const SliderOrientation = isHorizontal ? $faa2e61a3361514f$var$SliderHorizontal : $faa2e61a3361514f$var$SliderVertical;\n    const [values = [], setValues] = (0,_radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_5__.useControllableState)({\n        prop: value1,\n        defaultProp: defaultValue,\n        onChange: (value)=>{\n            var _thumbs$valueIndexToC;\n            const thumbs = [\n                ...thumbRefs.current\n            ];\n            (_thumbs$valueIndexToC = thumbs[valueIndexToChangeRef.current]) === null || _thumbs$valueIndexToC === void 0 || _thumbs$valueIndexToC.focus();\n            onValueChange(value);\n        }\n    });\n    const valuesBeforeSlideStartRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(values);\n    function handleSlideStart(value) {\n        const closestIndex = $faa2e61a3361514f$var$getClosestValueIndex(values, value);\n        updateValues(value, closestIndex);\n    }\n    function handleSlideMove(value) {\n        updateValues(value, valueIndexToChangeRef.current);\n    }\n    function handleSlideEnd() {\n        const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];\n        const nextValue = values[valueIndexToChangeRef.current];\n        const hasChanged = nextValue !== prevValue;\n        if (hasChanged) onValueCommit(values);\n    }\n    function updateValues(value, atIndex, { commit: commit } = {\n        commit: false\n    }) {\n        const decimalCount = $faa2e61a3361514f$var$getDecimalCount(step);\n        const snapToStep = $faa2e61a3361514f$var$roundValue(Math.round((value - min) / step) * step + min, decimalCount);\n        const nextValue = (0,_radix_ui_number__WEBPACK_IMPORTED_MODULE_6__.clamp)(snapToStep, [\n            min,\n            max\n        ]);\n        setValues((prevValues = [])=>{\n            const nextValues = $faa2e61a3361514f$var$getNextSortedValues(prevValues, nextValue, atIndex);\n            if ($faa2e61a3361514f$var$hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {\n                valueIndexToChangeRef.current = nextValues.indexOf(nextValue);\n                const hasChanged = String(nextValues) !== String(prevValues);\n                if (hasChanged && commit) onValueCommit(nextValues);\n                return hasChanged ? nextValues : prevValues;\n            } else return prevValues;\n        });\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$SliderProvider, {\n        scope: props.__scopeSlider,\n        disabled: disabled,\n        min: min,\n        max: max,\n        valueIndexToChangeRef: valueIndexToChangeRef,\n        thumbs: thumbRefs.current,\n        values: values,\n        orientation: orientation\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$Collection.Provider, {\n        scope: props.__scopeSlider\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$Collection.Slot, {\n        scope: props.__scopeSlider\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(SliderOrientation, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        \"aria-disabled\": disabled,\n        \"data-disabled\": disabled ? \"\" : undefined\n    }, sliderProps, {\n        ref: composedRefs,\n        onPointerDown: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(sliderProps.onPointerDown, ()=>{\n            if (!disabled) valuesBeforeSlideStartRef.current = values;\n        }),\n        min: min,\n        max: max,\n        inverted: inverted,\n        onSlideStart: disabled ? undefined : handleSlideStart,\n        onSlideMove: disabled ? undefined : handleSlideMove,\n        onSlideEnd: disabled ? undefined : handleSlideEnd,\n        onHomeKeyDown: ()=>!disabled && updateValues(min, 0, {\n                commit: true\n            }),\n        onEndKeyDown: ()=>!disabled && updateValues(max, values.length - 1, {\n                commit: true\n            }),\n        onStepKeyDown: ({ event: event, direction: stepDirection })=>{\n            if (!disabled) {\n                const isPageKey = $faa2e61a3361514f$var$PAGE_KEYS.includes(event.key);\n                const isSkipKey = isPageKey || event.shiftKey && $faa2e61a3361514f$var$ARROW_KEYS.includes(event.key);\n                const multiplier = isSkipKey ? 10 : 1;\n                const atIndex = valueIndexToChangeRef.current;\n                const value = values[atIndex];\n                const stepInDirection = step * multiplier * stepDirection;\n                updateValues(value + stepInDirection, atIndex, {\n                    commit: true\n                });\n            }\n        }\n    })))), isFormControl && values.map((value, index)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$BubbleInput, {\n            key: index,\n            name: name ? name + (values.length > 1 ? \"[]\" : \"\") : undefined,\n            value: value\n        })));\n});\n/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$472062a354075cee, {\n    displayName: $faa2e61a3361514f$var$SLIDER_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * SliderHorizontal\n * -----------------------------------------------------------------------------------------------*/ const [$faa2e61a3361514f$var$SliderOrientationProvider, $faa2e61a3361514f$var$useSliderOrientationContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME, {\n    startEdge: \"left\",\n    endEdge: \"right\",\n    size: \"width\",\n    direction: 1\n});\nconst $faa2e61a3361514f$var$SliderHorizontal = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { min: min, max: max, dir: dir, inverted: inverted, onSlideStart: onSlideStart, onSlideMove: onSlideMove, onSlideEnd: onSlideEnd, onStepKeyDown: onStepKeyDown, ...sliderProps } = props;\n    const [slider, setSlider] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, (node)=>setSlider(node));\n    const rectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const direction = (0,_radix_ui_react_direction__WEBPACK_IMPORTED_MODULE_8__.useDirection)(dir);\n    const isDirectionLTR = direction === \"ltr\";\n    const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;\n    function getValueFromPointer(pointerPosition) {\n        const rect = rectRef.current || slider.getBoundingClientRect();\n        const input = [\n            0,\n            rect.width\n        ];\n        const output = isSlidingFromLeft ? [\n            min,\n            max\n        ] : [\n            max,\n            min\n        ];\n        const value = $faa2e61a3361514f$var$linearScale(input, output);\n        rectRef.current = rect;\n        return value(pointerPosition - rect.left);\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {\n        scope: props.__scopeSlider,\n        startEdge: isSlidingFromLeft ? \"left\" : \"right\",\n        endEdge: isSlidingFromLeft ? \"right\" : \"left\",\n        direction: isSlidingFromLeft ? 1 : -1,\n        size: \"width\"\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$SliderImpl, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        dir: direction,\n        \"data-orientation\": \"horizontal\"\n    }, sliderProps, {\n        ref: composedRefs,\n        style: {\n            ...sliderProps.style,\n            [\"--radix-slider-thumb-transform\"]: \"translateX(-50%)\"\n        },\n        onSlideStart: (event)=>{\n            const value = getValueFromPointer(event.clientX);\n            onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);\n        },\n        onSlideMove: (event)=>{\n            const value = getValueFromPointer(event.clientX);\n            onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);\n        },\n        onSlideEnd: ()=>{\n            rectRef.current = undefined;\n            onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();\n        },\n        onStepKeyDown: (event)=>{\n            const slideDirection = isSlidingFromLeft ? \"from-left\" : \"from-right\";\n            const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);\n            onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({\n                event: event,\n                direction: isBackKey ? -1 : 1\n            });\n        }\n    })));\n});\n/* -------------------------------------------------------------------------------------------------\n * SliderVertical\n * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$SliderVertical = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { min: min, max: max, inverted: inverted, onSlideStart: onSlideStart, onSlideMove: onSlideMove, onSlideEnd: onSlideEnd, onStepKeyDown: onStepKeyDown, ...sliderProps } = props;\n    const sliderRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const ref = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, sliderRef);\n    const rectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const isSlidingFromBottom = !inverted;\n    function getValueFromPointer(pointerPosition) {\n        const rect = rectRef.current || sliderRef.current.getBoundingClientRect();\n        const input = [\n            0,\n            rect.height\n        ];\n        const output = isSlidingFromBottom ? [\n            max,\n            min\n        ] : [\n            min,\n            max\n        ];\n        const value = $faa2e61a3361514f$var$linearScale(input, output);\n        rectRef.current = rect;\n        return value(pointerPosition - rect.top);\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {\n        scope: props.__scopeSlider,\n        startEdge: isSlidingFromBottom ? \"bottom\" : \"top\",\n        endEdge: isSlidingFromBottom ? \"top\" : \"bottom\",\n        size: \"height\",\n        direction: isSlidingFromBottom ? 1 : -1\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$SliderImpl, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        \"data-orientation\": \"vertical\"\n    }, sliderProps, {\n        ref: ref,\n        style: {\n            ...sliderProps.style,\n            [\"--radix-slider-thumb-transform\"]: \"translateY(50%)\"\n        },\n        onSlideStart: (event)=>{\n            const value = getValueFromPointer(event.clientY);\n            onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);\n        },\n        onSlideMove: (event)=>{\n            const value = getValueFromPointer(event.clientY);\n            onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);\n        },\n        onSlideEnd: ()=>{\n            rectRef.current = undefined;\n            onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();\n        },\n        onStepKeyDown: (event)=>{\n            const slideDirection = isSlidingFromBottom ? \"from-bottom\" : \"from-top\";\n            const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);\n            onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({\n                event: event,\n                direction: isBackKey ? -1 : 1\n            });\n        }\n    })));\n});\n/* -------------------------------------------------------------------------------------------------\n * SliderImpl\n * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$SliderImpl = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { __scopeSlider: __scopeSlider, onSlideStart: onSlideStart, onSlideMove: onSlideMove, onSlideEnd: onSlideEnd, onHomeKeyDown: onHomeKeyDown, onEndKeyDown: onEndKeyDown, onStepKeyDown: onStepKeyDown, ...sliderProps } = props;\n    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$SLIDER_NAME, __scopeSlider);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_9__.Primitive.span, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, sliderProps, {\n        ref: forwardedRef,\n        onKeyDown: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onKeyDown, (event)=>{\n            if (event.key === \"Home\") {\n                onHomeKeyDown(event); // Prevent scrolling to page start\n                event.preventDefault();\n            } else if (event.key === \"End\") {\n                onEndKeyDown(event); // Prevent scrolling to page end\n                event.preventDefault();\n            } else if ($faa2e61a3361514f$var$PAGE_KEYS.concat($faa2e61a3361514f$var$ARROW_KEYS).includes(event.key)) {\n                onStepKeyDown(event); // Prevent scrolling for directional key presses\n                event.preventDefault();\n            }\n        }),\n        onPointerDown: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onPointerDown, (event)=>{\n            const target = event.target;\n            target.setPointerCapture(event.pointerId); // Prevent browser focus behaviour because we focus a thumb manually when values change.\n            event.preventDefault(); // Touch devices have a delay before focusing so won't focus if touch immediately moves\n            // away from target (sliding). We want thumb to focus regardless.\n            if (context.thumbs.has(target)) target.focus();\n            else onSlideStart(event);\n        }),\n        onPointerMove: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onPointerMove, (event)=>{\n            const target = event.target;\n            if (target.hasPointerCapture(event.pointerId)) onSlideMove(event);\n        }),\n        onPointerUp: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onPointerUp, (event)=>{\n            const target = event.target;\n            if (target.hasPointerCapture(event.pointerId)) {\n                target.releasePointerCapture(event.pointerId);\n                onSlideEnd(event);\n            }\n        })\n    }));\n});\n/* -------------------------------------------------------------------------------------------------\n * SliderTrack\n * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$TRACK_NAME = \"SliderTrack\";\nconst $faa2e61a3361514f$export$105594979f116971 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { __scopeSlider: __scopeSlider, ...trackProps } = props;\n    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$TRACK_NAME, __scopeSlider);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_9__.Primitive.span, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        \"data-disabled\": context.disabled ? \"\" : undefined,\n        \"data-orientation\": context.orientation\n    }, trackProps, {\n        ref: forwardedRef\n    }));\n});\n/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$105594979f116971, {\n    displayName: $faa2e61a3361514f$var$TRACK_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * SliderRange\n * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$RANGE_NAME = \"SliderRange\";\nconst $faa2e61a3361514f$export$a5cf38a7a000fe77 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { __scopeSlider: __scopeSlider, ...rangeProps } = props;\n    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);\n    const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, ref);\n    const valuesCount = context.values.length;\n    const percentages = context.values.map((value)=>$faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max));\n    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;\n    const offsetEnd = 100 - Math.max(...percentages);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_9__.Primitive.span, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        \"data-orientation\": context.orientation,\n        \"data-disabled\": context.disabled ? \"\" : undefined\n    }, rangeProps, {\n        ref: composedRefs,\n        style: {\n            ...props.style,\n            [orientation.startEdge]: offsetStart + \"%\",\n            [orientation.endEdge]: offsetEnd + \"%\"\n        }\n    }));\n});\n/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$a5cf38a7a000fe77, {\n    displayName: $faa2e61a3361514f$var$RANGE_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * SliderThumb\n * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$THUMB_NAME = \"SliderThumb\";\nconst $faa2e61a3361514f$export$2c1b491743890dec = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const getItems = $faa2e61a3361514f$var$useCollection(props.__scopeSlider);\n    const [thumb, setThumb] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, (node)=>setThumb(node));\n    const index = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>thumb ? getItems().findIndex((item)=>item.ref.current === thumb) : -1, [\n        getItems,\n        thumb\n    ]);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$SliderThumbImpl, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n        ref: composedRefs,\n        index: index\n    }));\n});\nconst $faa2e61a3361514f$var$SliderThumbImpl = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, forwardedRef)=>{\n    const { __scopeSlider: __scopeSlider, index: index, ...thumbProps } = props;\n    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);\n    const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);\n    const [thumb, setThumb] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_4__.useComposedRefs)(forwardedRef, (node)=>setThumb(node));\n    const size = (0,_radix_ui_react_use_size__WEBPACK_IMPORTED_MODULE_10__.useSize)(thumb); // We cast because index could be `-1` which would return undefined\n    const value = context.values[index];\n    const percent = value === undefined ? 0 : $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max);\n    const label = $faa2e61a3361514f$var$getLabel(index, context.values.length);\n    const orientationSize = size === null || size === void 0 ? void 0 : size[orientation.size];\n    const thumbInBoundsOffset = orientationSize ? $faa2e61a3361514f$var$getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (thumb) {\n            context.thumbs.add(thumb);\n            return ()=>{\n                context.thumbs.delete(thumb);\n            };\n        }\n    }, [\n        thumb,\n        context.thumbs\n    ]);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n        style: {\n            transform: \"var(--radix-slider-thumb-transform)\",\n            position: \"absolute\",\n            [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`\n        }\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)($faa2e61a3361514f$var$Collection.ItemSlot, {\n        scope: props.__scopeSlider\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_9__.Primitive.span, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        role: \"slider\",\n        \"aria-label\": props[\"aria-label\"] || label,\n        \"aria-valuemin\": context.min,\n        \"aria-valuenow\": value,\n        \"aria-valuemax\": context.max,\n        \"aria-orientation\": context.orientation,\n        \"data-orientation\": context.orientation,\n        \"data-disabled\": context.disabled ? \"\" : undefined,\n        tabIndex: context.disabled ? undefined : 0\n    }, thumbProps, {\n        ref: composedRefs,\n        style: value === undefined ? {\n            display: \"none\"\n        } : props.style,\n        onFocus: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onFocus, ()=>{\n            context.valueIndexToChangeRef.current = index;\n        })\n    }))));\n});\n/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$2c1b491743890dec, {\n    displayName: $faa2e61a3361514f$var$THUMB_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$BubbleInput = (props)=>{\n    const { value: value, ...inputProps } = props;\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const prevValue = (0,_radix_ui_react_use_previous__WEBPACK_IMPORTED_MODULE_11__.usePrevious)(value); // Bubble value change to parents (e.g form change event)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const input = ref.current;\n        const inputProto = window.HTMLInputElement.prototype;\n        const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"value\");\n        const setValue = descriptor.set;\n        if (prevValue !== value && setValue) {\n            const event = new Event(\"input\", {\n                bubbles: true\n            });\n            setValue.call(input, value);\n            input.dispatchEvent(event);\n        }\n    }, [\n        prevValue,\n        value\n    ]);\n    /**\n   * We purposefully do not use `type=\"hidden\"` here otherwise forms that\n   * wrap it will not be able to access its value via the FormData API.\n   *\n   * We purposefully do not add the `value` attribute here to allow the value\n   * to be set programatically and bubble to any parent form `onChange` event.\n   * Adding the `value` will cause React to consider the programatic\n   * dispatch a duplicate and it will get swallowed.\n   */ return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"input\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        style: {\n            display: \"none\"\n        }\n    }, inputProps, {\n        ref: ref,\n        defaultValue: value\n    }));\n};\nfunction $faa2e61a3361514f$var$getNextSortedValues(prevValues = [], nextValue, atIndex) {\n    const nextValues = [\n        ...prevValues\n    ];\n    nextValues[atIndex] = nextValue;\n    return nextValues.sort((a, b)=>a - b);\n}\nfunction $faa2e61a3361514f$var$convertValueToPercentage(value, min, max) {\n    const maxSteps = max - min;\n    const percentPerStep = 100 / maxSteps;\n    const percentage = percentPerStep * (value - min);\n    return (0,_radix_ui_number__WEBPACK_IMPORTED_MODULE_6__.clamp)(percentage, [\n        0,\n        100\n    ]);\n}\n/**\n * Returns a label for each thumb when there are two or more thumbs\n */ function $faa2e61a3361514f$var$getLabel(index, totalValues) {\n    if (totalValues > 2) return `Value ${index + 1} of ${totalValues}`;\n    else if (totalValues === 2) return [\n        \"Minimum\",\n        \"Maximum\"\n    ][index];\n    else return undefined;\n}\n/**\n * Given a `values` array and a `nextValue`, determine which value in\n * the array is closest to `nextValue` and return its index.\n *\n * @example\n * // returns 1\n * getClosestValueIndex([10, 30], 25);\n */ function $faa2e61a3361514f$var$getClosestValueIndex(values, nextValue) {\n    if (values.length === 1) return 0;\n    const distances = values.map((value)=>Math.abs(value - nextValue));\n    const closestDistance = Math.min(...distances);\n    return distances.indexOf(closestDistance);\n}\n/**\n * Offsets the thumb centre point while sliding to ensure it remains\n * within the bounds of the slider when reaching the edges\n */ function $faa2e61a3361514f$var$getThumbInBoundsOffset(width, left, direction) {\n    const halfWidth = width / 2;\n    const halfPercent = 50;\n    const offset = $faa2e61a3361514f$var$linearScale([\n        0,\n        halfPercent\n    ], [\n        0,\n        halfWidth\n    ]);\n    return (halfWidth - offset(left) * direction) * direction;\n}\n/**\n * Gets an array of steps between each value.\n *\n * @example\n * // returns [1, 9]\n * getStepsBetweenValues([10, 11, 20]);\n */ function $faa2e61a3361514f$var$getStepsBetweenValues(values) {\n    return values.slice(0, -1).map((value, index)=>values[index + 1] - value);\n}\n/**\n * Verifies the minimum steps between all values is greater than or equal\n * to the expected minimum steps.\n *\n * @example\n * // returns false\n * hasMinStepsBetweenValues([1,2,3], 2);\n *\n * @example\n * // returns true\n * hasMinStepsBetweenValues([1,2,3], 1);\n */ function $faa2e61a3361514f$var$hasMinStepsBetweenValues(values, minStepsBetweenValues) {\n    if (minStepsBetweenValues > 0) {\n        const stepsBetweenValues = $faa2e61a3361514f$var$getStepsBetweenValues(values);\n        const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);\n        return actualMinStepsBetweenValues >= minStepsBetweenValues;\n    }\n    return true;\n} // https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction $faa2e61a3361514f$var$linearScale(input, output) {\n    return (value)=>{\n        if (input[0] === input[1] || output[0] === output[1]) return output[0];\n        const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n        return output[0] + ratio * (value - input[0]);\n    };\n}\nfunction $faa2e61a3361514f$var$getDecimalCount(value) {\n    return (String(value).split(\".\")[1] || \"\").length;\n}\nfunction $faa2e61a3361514f$var$roundValue(value, decimalCount) {\n    const rounder = Math.pow(10, decimalCount);\n    return Math.round(value * rounder) / rounder;\n}\nconst $faa2e61a3361514f$export$be92b6f5f03c0fe9 = $faa2e61a3361514f$export$472062a354075cee;\nconst $faa2e61a3361514f$export$13921ac0cc260818 = $faa2e61a3361514f$export$105594979f116971;\nconst $faa2e61a3361514f$export$9a58ef0d7ad3278c = $faa2e61a3361514f$export$a5cf38a7a000fe77;\nconst $faa2e61a3361514f$export$6521433ed15a34db = $faa2e61a3361514f$export$2c1b491743890dec;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@radix-ui+react-slider@1.1.2_@types+react-dom@18.2.19_@types+react@18.2.55_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-slider/dist/index.mjs\n");

/***/ })

};
;