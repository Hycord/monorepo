"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/redis-parser@3.0.0";
exports.ids = ["vendor-chunks/redis-parser@3.0.0"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/redis-parser@3.0.0/node_modules/redis-parser/index.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/redis-parser@3.0.0/node_modules/redis-parser/index.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib/parser */ \"(rsc)/../../node_modules/.pnpm/redis-parser@3.0.0/node_modules/redis-parser/lib/parser.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZGlzLXBhcnNlckAzLjAuMC9ub2RlX21vZHVsZXMvcmVkaXMtcGFyc2VyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLHFKQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVkaXMtcGFyc2VyQDMuMC4wL25vZGVfbW9kdWxlcy9yZWRpcy1wYXJzZXIvaW5kZXguanM/N2VmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9wYXJzZXInKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/redis-parser@3.0.0/node_modules/redis-parser/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/redis-parser@3.0.0/node_modules/redis-parser/lib/parser.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/redis-parser@3.0.0/node_modules/redis-parser/lib/parser.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nconst StringDecoder = (__webpack_require__(/*! string_decoder */ \"string_decoder\").StringDecoder);\nconst decoder = new StringDecoder();\nconst errors = __webpack_require__(/*! redis-errors */ \"(rsc)/../../node_modules/.pnpm/redis-errors@1.2.0/node_modules/redis-errors/index.js\");\nconst ReplyError = errors.ReplyError;\nconst ParserError = errors.ParserError;\nvar bufferPool = Buffer.allocUnsafe(32 * 1024);\nvar bufferOffset = 0;\nvar interval = null;\nvar counter = 0;\nvar notDecreased = 0;\n/**\n * Used for integer numbers only\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|number}\n */ function parseSimpleNumbers(parser) {\n    const length = parser.buffer.length - 1;\n    var offset = parser.offset;\n    var number = 0;\n    var sign = 1;\n    if (parser.buffer[offset] === 45) {\n        sign = -1;\n        offset++;\n    }\n    while(offset < length){\n        const c1 = parser.buffer[offset++];\n        if (c1 === 13) {\n            parser.offset = offset + 1;\n            return sign * number;\n        }\n        number = number * 10 + (c1 - 48);\n    }\n}\n/**\n * Used for integer numbers in case of the returnNumbers option\n *\n * Reading the string as parts of n SMI is more efficient than\n * using a string directly.\n *\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|string}\n */ function parseStringNumbers(parser) {\n    const length = parser.buffer.length - 1;\n    var offset = parser.offset;\n    var number = 0;\n    var res = \"\";\n    if (parser.buffer[offset] === 45) {\n        res += \"-\";\n        offset++;\n    }\n    while(offset < length){\n        var c1 = parser.buffer[offset++];\n        if (c1 === 13) {\n            parser.offset = offset + 1;\n            if (number !== 0) {\n                res += number;\n            }\n            return res;\n        } else if (number > 429496728) {\n            res += number * 10 + (c1 - 48);\n            number = 0;\n        } else if (c1 === 48 && number === 0) {\n            res += 0;\n        } else {\n            number = number * 10 + (c1 - 48);\n        }\n    }\n}\n/**\n * Parse a '+' redis simple string response but forward the offsets\n * onto convertBufferRange to generate a string.\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|string|Buffer}\n */ function parseSimpleString(parser) {\n    const start = parser.offset;\n    const buffer = parser.buffer;\n    const length = buffer.length - 1;\n    var offset = start;\n    while(offset < length){\n        if (buffer[offset++] === 13) {\n            parser.offset = offset + 1;\n            if (parser.optionReturnBuffers === true) {\n                return parser.buffer.slice(start, offset - 1);\n            }\n            return parser.buffer.toString(\"utf8\", start, offset - 1);\n        }\n    }\n}\n/**\n * Returns the read length\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|number}\n */ function parseLength(parser) {\n    const length = parser.buffer.length - 1;\n    var offset = parser.offset;\n    var number = 0;\n    while(offset < length){\n        const c1 = parser.buffer[offset++];\n        if (c1 === 13) {\n            parser.offset = offset + 1;\n            return number;\n        }\n        number = number * 10 + (c1 - 48);\n    }\n}\n/**\n * Parse a ':' redis integer response\n *\n * If stringNumbers is activated the parser always returns numbers as string\n * This is important for big numbers (number > Math.pow(2, 53)) as js numbers\n * are 64bit floating point numbers with reduced precision\n *\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|number|string}\n */ function parseInteger(parser) {\n    if (parser.optionStringNumbers === true) {\n        return parseStringNumbers(parser);\n    }\n    return parseSimpleNumbers(parser);\n}\n/**\n * Parse a '$' redis bulk string response\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|null|string}\n */ function parseBulkString(parser) {\n    const length = parseLength(parser);\n    if (length === undefined) {\n        return;\n    }\n    if (length < 0) {\n        return null;\n    }\n    const offset = parser.offset + length;\n    if (offset + 2 > parser.buffer.length) {\n        parser.bigStrSize = offset + 2;\n        parser.totalChunkSize = parser.buffer.length;\n        parser.bufferCache.push(parser.buffer);\n        return;\n    }\n    const start = parser.offset;\n    parser.offset = offset + 2;\n    if (parser.optionReturnBuffers === true) {\n        return parser.buffer.slice(start, offset);\n    }\n    return parser.buffer.toString(\"utf8\", start, offset);\n}\n/**\n * Parse a '-' redis error response\n * @param {JavascriptRedisParser} parser\n * @returns {ReplyError}\n */ function parseError(parser) {\n    var string = parseSimpleString(parser);\n    if (string !== undefined) {\n        if (parser.optionReturnBuffers === true) {\n            string = string.toString();\n        }\n        return new ReplyError(string);\n    }\n}\n/**\n * Parsing error handler, resets parser buffer\n * @param {JavascriptRedisParser} parser\n * @param {number} type\n * @returns {undefined}\n */ function handleError(parser, type) {\n    const err = new ParserError(\"Protocol error, got \" + JSON.stringify(String.fromCharCode(type)) + \" as reply type byte\", JSON.stringify(parser.buffer), parser.offset);\n    parser.buffer = null;\n    parser.returnFatalError(err);\n}\n/**\n * Parse a '*' redis array response\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|null|any[]}\n */ function parseArray(parser) {\n    const length = parseLength(parser);\n    if (length === undefined) {\n        return;\n    }\n    if (length < 0) {\n        return null;\n    }\n    const responses = new Array(length);\n    return parseArrayElements(parser, responses, 0);\n}\n/**\n * Push a partly parsed array to the stack\n *\n * @param {JavascriptRedisParser} parser\n * @param {any[]} array\n * @param {number} pos\n * @returns {undefined}\n */ function pushArrayCache(parser, array, pos) {\n    parser.arrayCache.push(array);\n    parser.arrayPos.push(pos);\n}\n/**\n * Parse chunked redis array response\n * @param {JavascriptRedisParser} parser\n * @returns {undefined|any[]}\n */ function parseArrayChunks(parser) {\n    const tmp = parser.arrayCache.pop();\n    var pos = parser.arrayPos.pop();\n    if (parser.arrayCache.length) {\n        const res = parseArrayChunks(parser);\n        if (res === undefined) {\n            pushArrayCache(parser, tmp, pos);\n            return;\n        }\n        tmp[pos++] = res;\n    }\n    return parseArrayElements(parser, tmp, pos);\n}\n/**\n * Parse redis array response elements\n * @param {JavascriptRedisParser} parser\n * @param {Array} responses\n * @param {number} i\n * @returns {undefined|null|any[]}\n */ function parseArrayElements(parser, responses, i) {\n    const bufferLength = parser.buffer.length;\n    while(i < responses.length){\n        const offset = parser.offset;\n        if (parser.offset >= bufferLength) {\n            pushArrayCache(parser, responses, i);\n            return;\n        }\n        const response = parseType(parser, parser.buffer[parser.offset++]);\n        if (response === undefined) {\n            if (!(parser.arrayCache.length || parser.bufferCache.length)) {\n                parser.offset = offset;\n            }\n            pushArrayCache(parser, responses, i);\n            return;\n        }\n        responses[i] = response;\n        i++;\n    }\n    return responses;\n}\n/**\n * Called the appropriate parser for the specified type.\n *\n * 36: $\n * 43: +\n * 42: *\n * 58: :\n * 45: -\n *\n * @param {JavascriptRedisParser} parser\n * @param {number} type\n * @returns {*}\n */ function parseType(parser, type) {\n    switch(type){\n        case 36:\n            return parseBulkString(parser);\n        case 43:\n            return parseSimpleString(parser);\n        case 42:\n            return parseArray(parser);\n        case 58:\n            return parseInteger(parser);\n        case 45:\n            return parseError(parser);\n        default:\n            return handleError(parser, type);\n    }\n}\n/**\n * Decrease the bufferPool size over time\n *\n * Balance between increasing and decreasing the bufferPool.\n * Decrease the bufferPool by 10% by removing the first 10% of the current pool.\n * @returns {undefined}\n */ function decreaseBufferPool() {\n    if (bufferPool.length > 50 * 1024) {\n        if (counter === 1 || notDecreased > counter * 2) {\n            const minSliceLen = Math.floor(bufferPool.length / 10);\n            const sliceLength = minSliceLen < bufferOffset ? bufferOffset : minSliceLen;\n            bufferOffset = 0;\n            bufferPool = bufferPool.slice(sliceLength, bufferPool.length);\n        } else {\n            notDecreased++;\n            counter--;\n        }\n    } else {\n        clearInterval(interval);\n        counter = 0;\n        notDecreased = 0;\n        interval = null;\n    }\n}\n/**\n * Check if the requested size fits in the current bufferPool.\n * If it does not, reset and increase the bufferPool accordingly.\n *\n * @param {number} length\n * @returns {undefined}\n */ function resizeBuffer(length) {\n    if (bufferPool.length < length + bufferOffset) {\n        const multiplier = length > 1024 * 1024 * 75 ? 2 : 3;\n        if (bufferOffset > 1024 * 1024 * 111) {\n            bufferOffset = 1024 * 1024 * 50;\n        }\n        bufferPool = Buffer.allocUnsafe(length * multiplier + bufferOffset);\n        bufferOffset = 0;\n        counter++;\n        if (interval === null) {\n            interval = setInterval(decreaseBufferPool, 50);\n        }\n    }\n}\n/**\n * Concat a bulk string containing multiple chunks\n *\n * Notes:\n * 1) The first chunk might contain the whole bulk string including the \\r\n * 2) We are only safe to fully add up elements that are neither the first nor any of the last two elements\n *\n * @param {JavascriptRedisParser} parser\n * @returns {String}\n */ function concatBulkString(parser) {\n    const list = parser.bufferCache;\n    const oldOffset = parser.offset;\n    var chunks = list.length;\n    var offset = parser.bigStrSize - parser.totalChunkSize;\n    parser.offset = offset;\n    if (offset <= 2) {\n        if (chunks === 2) {\n            return list[0].toString(\"utf8\", oldOffset, list[0].length + offset - 2);\n        }\n        chunks--;\n        offset = list[list.length - 2].length + offset;\n    }\n    var res = decoder.write(list[0].slice(oldOffset));\n    for(var i = 1; i < chunks - 1; i++){\n        res += decoder.write(list[i]);\n    }\n    res += decoder.end(list[i].slice(0, offset - 2));\n    return res;\n}\n/**\n * Concat the collected chunks from parser.bufferCache.\n *\n * Increases the bufferPool size beforehand if necessary.\n *\n * @param {JavascriptRedisParser} parser\n * @returns {Buffer}\n */ function concatBulkBuffer(parser) {\n    const list = parser.bufferCache;\n    const oldOffset = parser.offset;\n    const length = parser.bigStrSize - oldOffset - 2;\n    var chunks = list.length;\n    var offset = parser.bigStrSize - parser.totalChunkSize;\n    parser.offset = offset;\n    if (offset <= 2) {\n        if (chunks === 2) {\n            return list[0].slice(oldOffset, list[0].length + offset - 2);\n        }\n        chunks--;\n        offset = list[list.length - 2].length + offset;\n    }\n    resizeBuffer(length);\n    const start = bufferOffset;\n    list[0].copy(bufferPool, start, oldOffset, list[0].length);\n    bufferOffset += list[0].length - oldOffset;\n    for(var i = 1; i < chunks - 1; i++){\n        list[i].copy(bufferPool, bufferOffset);\n        bufferOffset += list[i].length;\n    }\n    list[i].copy(bufferPool, bufferOffset, 0, offset - 2);\n    bufferOffset += offset - 2;\n    return bufferPool.slice(start, bufferOffset);\n}\nclass JavascriptRedisParser {\n    /**\n   * Javascript Redis Parser constructor\n   * @param {{returnError: Function, returnReply: Function, returnFatalError?: Function, returnBuffers: boolean, stringNumbers: boolean }} options\n   * @constructor\n   */ constructor(options){\n        if (!options) {\n            throw new TypeError(\"Options are mandatory.\");\n        }\n        if (typeof options.returnError !== \"function\" || typeof options.returnReply !== \"function\") {\n            throw new TypeError(\"The returnReply and returnError options have to be functions.\");\n        }\n        this.setReturnBuffers(!!options.returnBuffers);\n        this.setStringNumbers(!!options.stringNumbers);\n        this.returnError = options.returnError;\n        this.returnFatalError = options.returnFatalError || options.returnError;\n        this.returnReply = options.returnReply;\n        this.reset();\n    }\n    /**\n   * Reset the parser values to the initial state\n   *\n   * @returns {undefined}\n   */ reset() {\n        this.offset = 0;\n        this.buffer = null;\n        this.bigStrSize = 0;\n        this.totalChunkSize = 0;\n        this.bufferCache = [];\n        this.arrayCache = [];\n        this.arrayPos = [];\n    }\n    /**\n   * Set the returnBuffers option\n   *\n   * @param {boolean} returnBuffers\n   * @returns {undefined}\n   */ setReturnBuffers(returnBuffers) {\n        if (typeof returnBuffers !== \"boolean\") {\n            throw new TypeError(\"The returnBuffers argument has to be a boolean\");\n        }\n        this.optionReturnBuffers = returnBuffers;\n    }\n    /**\n   * Set the stringNumbers option\n   *\n   * @param {boolean} stringNumbers\n   * @returns {undefined}\n   */ setStringNumbers(stringNumbers) {\n        if (typeof stringNumbers !== \"boolean\") {\n            throw new TypeError(\"The stringNumbers argument has to be a boolean\");\n        }\n        this.optionStringNumbers = stringNumbers;\n    }\n    /**\n   * Parse the redis buffer\n   * @param {Buffer} buffer\n   * @returns {undefined}\n   */ execute(buffer) {\n        if (this.buffer === null) {\n            this.buffer = buffer;\n            this.offset = 0;\n        } else if (this.bigStrSize === 0) {\n            const oldLength = this.buffer.length;\n            const remainingLength = oldLength - this.offset;\n            const newBuffer = Buffer.allocUnsafe(remainingLength + buffer.length);\n            this.buffer.copy(newBuffer, 0, this.offset, oldLength);\n            buffer.copy(newBuffer, remainingLength, 0, buffer.length);\n            this.buffer = newBuffer;\n            this.offset = 0;\n            if (this.arrayCache.length) {\n                const arr = parseArrayChunks(this);\n                if (arr === undefined) {\n                    return;\n                }\n                this.returnReply(arr);\n            }\n        } else if (this.totalChunkSize + buffer.length >= this.bigStrSize) {\n            this.bufferCache.push(buffer);\n            var tmp = this.optionReturnBuffers ? concatBulkBuffer(this) : concatBulkString(this);\n            this.bigStrSize = 0;\n            this.bufferCache = [];\n            this.buffer = buffer;\n            if (this.arrayCache.length) {\n                this.arrayCache[0][this.arrayPos[0]++] = tmp;\n                tmp = parseArrayChunks(this);\n                if (tmp === undefined) {\n                    return;\n                }\n            }\n            this.returnReply(tmp);\n        } else {\n            this.bufferCache.push(buffer);\n            this.totalChunkSize += buffer.length;\n            return;\n        }\n        while(this.offset < this.buffer.length){\n            const offset = this.offset;\n            const type = this.buffer[this.offset++];\n            const response = parseType(this, type);\n            if (response === undefined) {\n                if (!(this.arrayCache.length || this.bufferCache.length)) {\n                    this.offset = offset;\n                }\n                return;\n            }\n            if (type === 45) {\n                this.returnError(response);\n            } else {\n                this.returnReply(response);\n            }\n        }\n        this.buffer = null;\n    }\n}\nmodule.exports = JavascriptRedisParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/redis-parser@3.0.0/node_modules/redis-parser/lib/parser.js\n");

/***/ })

};
;